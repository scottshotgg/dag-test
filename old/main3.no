package main

/*
	- parent spec
	- parent sends to children
*/

import (
	"encoding/json"
	"fmt"
	"sync"
	"time"
)

var m = `
	{
		"a": [],
		"b": [ "a" ],
		"c": [ "b" ],
		"d": [ "a" ]
	}
`

type Ready struct {
	ch    chan string
	chans map[string]chan string
}

func (r *Ready) start(v *Vertex) {
	var count int

	for {
		if count == len(v.parents) {
			fmt.Println("vertex is ready:", v.ID)

			processVertex(v)

			for _, ch := range r.chans {
				ch <- v.ID
			}

			close(r.ch)

			return
		}

		select {
		case <-r.ch:
			count++

			// default:
			// 	time.Sleep(500 * time.Millisecond)
			// 	fmt.Println("vertex not ready yet:", v.ID)
		}
	}
}

type Spec map[string][]string

type Vertex struct {
	sync.Mutex

	ID string

	running  bool
	done     bool
	isSource bool
	isSink   bool

	fn  func(*Vertex)
	err error

	ready Ready

	// TODO(scottshotgg): make children a sub-DAG
	children map[string]*Vertex
	parents  map[string]*Vertex
}

type DAG struct {
	SourceV   map[string]*Vertex
	SinkV     map[string]*Vertex
	Verticies map[string]*Vertex
}

func (d DAG) String() string {
	var s string

	s += fmt.Sprintln("\nVerticies:")
	for _, v := range d.Verticies {
		s += fmt.Sprintln("Vertex:", v.ID)
		for _, c := range v.children {
			s += fmt.Sprintln("Child:", c.ID)
		}

		for _, c := range v.parents {
			s += fmt.Sprintln("Parent:", c.ID)
		}

		s += fmt.Sprintf("\n")
	}

	s += fmt.Sprintln("\nSources:")
	for _, v := range d.SourceV {
		s += fmt.Sprintln("source:", v.ID)
	}

	s += fmt.Sprintln("\nSinks:")
	for _, v := range d.SinkV {
		s += fmt.Sprintln("sink:", v.ID)
	}
	return s
}

func werk(v *Vertex) {
	// If the vertex is already finished or still running
	if v.done || v.running {
		return
	}

	v.running = true
	fmt.Println("running:", v.ID)

	time.Sleep(2 * time.Second)

	fmt.Println("done running:", v.ID)
	v.done = true
}

func BuildDAG() *DAG {
	var s Spec
	var err = json.Unmarshal([]byte(m), &s)
	if err != nil {
		panic(err)
	}

	var d = DAG{
		SourceV:   map[string]*Vertex{},
		SinkV:     map[string]*Vertex{},
		Verticies: map[string]*Vertex{},
	}

	for name, parents := range s {
		var child, ok = d.Verticies[name]
		if !ok {
			child = &Vertex{
				ID:       name,
				fn:       werk,
				children: map[string]*Vertex{},
				parents:  map[string]*Vertex{},
				isSink:   true,

				ready: Ready{
					ch:    make(chan string),
					chans: map[string]chan string{},
				},
			}

			d.SinkV[name] = child
			d.Verticies[name] = child
		}

		if len(parents) == 0 {
			child.isSource = true
			d.SourceV[name] = child

			continue
		}

		for _, n := range parents {
			var parent, ok = d.Verticies[n]
			if !ok {
				parent = &Vertex{
					ID:       n,
					fn:       werk,
					children: map[string]*Vertex{},
					parents:  map[string]*Vertex{},

					ready: Ready{
						ch:    make(chan string),
						chans: map[string]chan string{},
					},
				}
			}

			parent.isSink = false
			delete(d.SinkV, n)

			parent.ready.chans[name] = child.ready.ch
			child.parents[n] = parent
			parent.children[name] = child
			d.Verticies[n] = parent
		}
	}

	return &d
}

func processDAG(d *DAG) {
	// Start from the source nodes
	// processVerticies(d.SourceV)
	processVerticies2(d.Verticies)
}

func processVerticies2(vs map[string]*Vertex) {
	var wg sync.WaitGroup

	// for _, v := range vs {
	// 	v := v
	// }

	// Start from the source nodes
	for _, v := range vs {
		fmt.Println()

		wg.Add(1)

		go func(v *Vertex) {
			defer wg.Done()

			// processVertex(v)
			v.ready.start(v)
		}(v)
	}

	wg.Wait()
}

func processVerticies(vs map[string]*Vertex) {
	var wg sync.WaitGroup

	// Start from the source nodes
	for _, v := range vs {
		fmt.Println()

		wg.Add(1)
		go func(v *Vertex) {
			defer wg.Done()

			processVertex(v)
		}(v)
	}

	wg.Wait()
}

func processVertex(v *Vertex) {
	v.Lock()
	defer v.Unlock()

	fmt.Println("Processing:", v.ID)

	v.fn(v)
	if v.err != nil {
		fmt.Println("err:", v.err)
	}
}
